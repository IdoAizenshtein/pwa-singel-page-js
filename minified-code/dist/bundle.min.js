const homeView={render:()=>"<div class=home><h1>Welcome to Game Dashboard</h1><p>Choose a section from the navigation menu above.</div>"},leaderboardView={render:()=>"<div class=leaderboard><h1>Leaderboard</h1><div class=last-update>Last updated: <span id=leaderboard-update-time>Never</span></div><div id=leaderboard-content class=leaderboard-content></div></div>",updateContent:()=>{const e=document.getElementById("leaderboard-content");document.getElementById("leaderboard-update-time").textContent=(new Date).toLocaleTimeString();const t=window.store.state.leaderboard;e.innerHTML=t.map((e=>`<div class=player-row><div class=rank>#${e.rank}</div><div class=username>${e.username}</div><div class=level>Level ${e.level}</div><div class=xp>XP: ${e.xp}</div><div class=gold>Gold: ${e.gold}</div></div>`)).join("")},afterRender:async()=>{await window.store.fetchLeaderboard(),leaderboardView.updateContent(),window.store.subscribe((()=>{leaderboardView.updateContent()}))}},marketView={render:()=>"<div class=market><h1>Market</h1><div class=last-update>Last updated: <span id=market-update-time>Never</span></div><div id=market-content class=market-content></div></div>",updateContent:()=>{const e=document.getElementById("market-content");document.getElementById("market-update-time").textContent=(new Date).toLocaleTimeString();const t=window.store.state.market;e.innerHTML=t.map((e=>`<div class=item-card><h3>${e.name}</h3><p class=type>${e.type}<p class=description>${e.description}<p class=cost>${e.cost} gold</div>`)).join("")},afterRender:async()=>{await window.store.fetchMarket(),marketView.updateContent(),window.store.subscribe((()=>{marketView.updateContent()}))}};class Store{constructor(){this.state={leaderboard:[],market:[],isOffline:!navigator.onLine,lastUpdate:null},this.listeners=new Set,this.pollingIntervals={},window.addEventListener("online",(()=>{this.setOfflineStatus(!1),this.startPolling()})),window.addEventListener("offline",(()=>{this.setOfflineStatus(!0),this.stopPolling()}))}subscribe(e){return this.listeners.add(e),()=>this.listeners.delete(e)}clearListeners(){this.listeners.clear()}notify(){this.listeners.forEach((e=>e(this.state)))}setOfflineStatus(e){this.state.isOffline=e,this.notify(),document.getElementById("offline-banner").classList.toggle("hidden",!e)}startPolling(){this.pollingIntervals.leaderboard=setInterval((()=>{this.fetchLeaderboard()}),5e3),this.pollingIntervals.market=setInterval((()=>{this.fetchMarket()}),1e4)}stopPolling(){Object.values(this.pollingIntervals).forEach((e=>{clearInterval(e)})),this.pollingIntervals={}}async initializeAndStartPolling(){await Promise.all([this.fetchLeaderboard(),this.fetchMarket()]),navigator.onLine&&this.startPolling()}async fetchLeaderboard(){try{const e=await fetch("https://api-game.bloque.app/game/leaderboard"),t=await e.json();this.state.leaderboard=t.players,this.state.lastUpdate=(new Date).toLocaleTimeString(),localStorage.setItem("leaderboard",JSON.stringify(t.players)),this.notify()}catch(e){const t=localStorage.getItem("leaderboard");t&&(this.state.leaderboard=JSON.parse(t),this.notify())}}async fetchMarket(){try{const e=await fetch("https://api-game.bloque.app/game/market"),t=await e.json();this.state.market=t.items,this.state.lastUpdate=(new Date).toLocaleTimeString(),localStorage.setItem("market",JSON.stringify(t.items)),this.notify()}catch(e){const t=localStorage.getItem("market");t&&(this.state.market=JSON.parse(t),this.notify())}}}window.store=new Store,window.store.initializeAndStartPolling();class Router{constructor(){this.routes={},window.addEventListener("popstate",(()=>this.handleRoute())),document.body.addEventListener("click",(e=>{e.target.matches("[data-route]")&&(e.preventDefault(),this.navigateTo(e.target.dataset.route))}))}addRoute(e,t){this.routes[e]=t}navigateTo(e){window.history.pushState({},"","home"===e?"/":"/"+e),this.handleRoute()}handleRoute(){const e=window.location.pathname,t="/"===e?"home":e.slice(1),a=this.routes[t]||this.routes[404];window.store.clearListeners(),document.getElementById("app").innerHTML=a.render(),a.afterRender&&a.afterRender()}}document.addEventListener("DOMContentLoaded",(()=>{window.router=new Router})),"serviceWorker"in navigator&&window.addEventListener("load",(()=>{navigator.serviceWorker.register("/sw.min.js").then((e=>{let t;e.installing?t=e.installing:e.waiting?t=e.waiting:e.active&&(t=e.active),t&&t.addEventListener("statechange",(e=>{}))})).catch((e=>{}))})),document.addEventListener("DOMContentLoaded",(()=>{router.addRoute("home",homeView),router.addRoute("leaderboard",leaderboardView),router.addRoute("market",marketView),router.addRoute("404",{render:()=>"<div class=error><h1>404 - Page Not Found</h1><p>The page you're looking for doesn't exist.</div>"}),router.handleRoute()}));